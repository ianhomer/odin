// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sequences container renders OK 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(SequencesContainer)
    flux={
      MockFlux {
        "client": [Function],
        "loadFromServer": [Function],
        "loadSchema": [Function],
        "onCreate": [Function],
        "onDelete": [Function],
        "onPatch": [Function],
        "onUpdate": [Function],
      }
    }
    project={
      Object {
        "_links": Object {
          "channels": Object {
            "href": "http://localhost:8080/api/project/1/channels",
          },
          "layers": Object {
            "href": "http://localhost:8080/api/project/1/layers",
          },
          "project": Object {
            "href": "http://localhost:8080/api/project/1",
          },
          "self": Object {
            "href": "http://localhost:8080/api/project/1",
          },
          "sequences": Object {
            "href": "http://localhost:8080/api/project/1/sequences",
          },
        },
        "name": "defaultProject",
      }
    }
    schema={
      Schema {
        "revision": undefined,
      }
    }
  >
    <SequencesContainer
      entities={Array []}
      flux={
        MockFlux {
          "client": [Function],
          "loadFromServer": [Function],
          "loadSchema": [Function],
          "onCreate": [Function],
          "onDelete": [Function],
          "onPatch": [Function],
          "onUpdate": [Function],
        }
      }
      onCreate={[Function]}
      onDelete={[Function]}
      onLoadEntities={[Function]}
      onUpdate={[Function]}
      path="sequence"
      project={
        Object {
          "_links": Object {
            "channels": Object {
              "href": "http://localhost:8080/api/project/1/channels",
            },
            "layers": Object {
              "href": "http://localhost:8080/api/project/1/layers",
            },
            "project": Object {
              "href": "http://localhost:8080/api/project/1",
            },
            "self": Object {
              "href": "http://localhost:8080/api/project/1",
            },
            "sequences": Object {
              "href": "http://localhost:8080/api/project/1/sequences",
            },
          },
          "name": "defaultProject",
        }
      }
      schema={
        Schema {
          "revision": undefined,
        }
      }
    >
      <div>
        <SequenceList
          entities={Array []}
          flux={
            MockFlux {
              "client": [Function],
              "loadFromServer": [Function],
              "loadSchema": [Function],
              "onCreate": [Function],
              "onDelete": [Function],
              "onPatch": [Function],
              "onUpdate": [Function],
            }
          }
          onCreate={[Function]}
          onDelete={[Function]}
          path="sequence"
          project={
            Object {
              "_links": Object {
                "channels": Object {
                  "href": "http://localhost:8080/api/project/1/channels",
                },
                "layers": Object {
                  "href": "http://localhost:8080/api/project/1/layers",
                },
                "project": Object {
                  "href": "http://localhost:8080/api/project/1",
                },
                "self": Object {
                  "href": "http://localhost:8080/api/project/1",
                },
                "sequences": Object {
                  "href": "http://localhost:8080/api/project/1/sequences",
                },
              },
              "name": "defaultProject",
            }
          }
          schema={
            Schema {
              "revision": undefined,
            }
          }
        >
          <div>
            <div
              className="container"
            >
              <div
                className="row"
              >
                <div
                  className="col-1"
                >
                  Name
                </div>
                <div
                  className="col-3"
                >
                  Â 
                </div>
                <div
                  className="col-2"
                >
                  Tick
                </div>
                <div
                  className="col-1"
                >
                  Offset
                </div>
                <div
                  className="col-1"
                >
                  Length
                </div>
                <div
                  className="col-1"
                >
                  Channel
                </div>
                <div
                  className="col-2"
                >
                  Flow Name
                </div>
              </div>
              <hr />
              <EditEntity
                clazz={
                  Clazz {
                    "getClazz": [Function],
                    "id": "flow-notation",
                    "path": "sequence",
                    "properties": Object {
                      "channel": Object {
                        "title": "Channel",
                        "type": "integer",
                      },
                      "flowName": Object {
                        "title": "Flow Name",
                        "type": "string",
                      },
                      "format": Object {
                        "title": "Format",
                        "type": "string",
                      },
                      "layers": Object {
                        "items": Object {
                          "type": "string",
                        },
                        "title": "Layers",
                        "type": "array",
                      },
                      "length": Object {
                        "minimum": -1,
                        "title": "Length",
                        "type": "integer",
                      },
                      "name": Object {
                        "title": "Name",
                        "type": "string",
                      },
                      "notation": Object {
                        "title": "Notation",
                        "type": "string",
                      },
                      "offset": Object {
                        "title": "Offset",
                        "type": "integer",
                      },
                      "project": Object {
                        "format": "uri",
                        "title": "Project",
                        "type": "string",
                      },
                      "tick": Object {
                        "$ref": "#/definitions/PersistableTick",
                        "title": "Tick",
                      },
                    },
                  }
                }
                fields={
                  Object {
                    "channel": Object {
                      "defaultValue": 1,
                    },
                    "flowName": Object {
                      "cellWidth": 2,
                      "defaultValue": "notation",
                      "readOnly": true,
                    },
                    "format": Object {
                      "cellWidth": 1,
                      "defaultValue": "natural",
                      "hidden": true,
                    },
                    "layers": Object {
                      "defaultValue": "",
                      "hidden": true,
                    },
                    "length": Object {
                      "defaultValue": -1,
                    },
                    "name": Object {
                      "maxLength": 8,
                      "size": 8,
                    },
                    "notation": Object {
                      "cellWidth": 3,
                      "defaultValue": "C",
                    },
                    "offset": Object {
                      "defaultValue": 0,
                    },
                    "tick": Object {
                      "cellWidth": 2,
                      "fields": Object {
                        "denominator": Object {
                          "cellWidth": 6,
                          "defaultValue": 1,
                          "label": "/",
                        },
                        "numerator": Object {
                          "cellWidth": 6,
                          "defaultValue": 1,
                        },
                        "timeUnit": Object {
                          "defaultValue": "BEAT",
                          "hidden": true,
                        },
                      },
                    },
                  }
                }
                flux={
                  MockFlux {
                    "client": [Function],
                    "loadFromServer": [Function],
                    "loadSchema": [Function],
                    "onCreate": [Function],
                    "onDelete": [Function],
                    "onPatch": [Function],
                    "onUpdate": [Function],
                  }
                }
                onApply={[Function]}
                project={
                  Object {
                    "_links": Object {
                      "channels": Object {
                        "href": "http://localhost:8080/api/project/1/channels",
                      },
                      "layers": Object {
                        "href": "http://localhost:8080/api/project/1/layers",
                      },
                      "project": Object {
                        "href": "http://localhost:8080/api/project/1",
                      },
                      "self": Object {
                        "href": "http://localhost:8080/api/project/1",
                      },
                      "sequences": Object {
                        "href": "http://localhost:8080/api/project/1/sequences",
                      },
                    },
                    "name": "defaultProject",
                  }
                }
                schema={
                  Schema {
                    "revision": undefined,
                  }
                }
              >
                <div
                  className="entityCreate row"
                >
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      maxLength={8}
                      onKeyPress={[Function]}
                      placeholder="name"
                      size={8}
                      type="text"
                    />
                  </div>
                  <input
                    name="format"
                    type="hidden"
                    value="natural"
                  />
                  <div
                    className="col-3"
                  >
                    <Score
                      componentKey="notation"
                      componentRef={[Function]}
                      editor={true}
                      entity={
                        Object {
                          "notation": "C",
                        }
                      }
                      flux={
                        MockFlux {
                          "client": [Function],
                          "loadFromServer": [Function],
                          "loadSchema": [Function],
                          "onCreate": [Function],
                          "onDelete": [Function],
                          "onPatch": [Function],
                          "onUpdate": [Function],
                        }
                      }
                      height={120}
                      onKeyPress={[Function]}
                      size={0}
                      width={800}
                    >
                      <div>
                        <span>
                          <input
                            className="inline"
                            onChange={[Function]}
                            onKeyPress={[Function]}
                            placeholder="notation"
                            size={0}
                            type="text"
                          />
                        </span>
                        <div
                          id="undefined-notation-1"
                          style={
                            Object {
                              "height": "120px",
                              "width": "800px",
                            }
                          }
                        />
                      </div>
                    </Score>
                  </div>
                  <div
                    className="component col-2"
                  >
                    <div
                      className="row"
                    >
                      <div
                        className="col-6"
                      >
                        <input
                          className="inline"
                          defaultValue={1}
                          maxLength={1024}
                          onKeyPress={[Function]}
                          placeholder="tick.numerator"
                          size={3}
                          type="text"
                        />
                      </div>
                      <div
                        className="col-6"
                      >
                        <span>
                          /
                        </span>
                        <input
                          className="inline"
                          defaultValue={1}
                          maxLength={1024}
                          onKeyPress={[Function]}
                          placeholder="tick.denominator"
                          size={3}
                          type="text"
                        />
                      </div>
                      <input
                        name="tick.timeUnit"
                        type="hidden"
                        value="BEAT"
                      />
                    </div>
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={0}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="offset"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={-1}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="length"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={1}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="channel"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-2"
                  >
                    <span>
                      notation
                    </span>
                    <input
                      name="flowName"
                      type="hidden"
                      value="notation"
                    />
                  </div>
                  <input
                    name="layers"
                    type="hidden"
                    value=""
                  />
                  <div
                    className="col-1"
                  >
                    <input
                      name="project"
                      type="hidden"
                      value="http://localhost:8080/api/project/1"
                    />
                    <input
                      name="path"
                      type="hidden"
                      value="sequence"
                    />
                    <button
                      className="btn btn-primary"
                      onClick={[Function]}
                      type="submit"
                    >
                      Create
                    </button>
                  </div>
                </div>
              </EditEntity>
              <EditEntity
                clazz={
                  Clazz {
                    "getClazz": [Function],
                    "id": "flow-pattern",
                    "path": "sequence",
                    "properties": Object {
                      "bits": Object {
                        "minimum": 0,
                        "title": "Bits",
                        "type": "integer",
                      },
                      "channel": Object {
                        "title": "Channel",
                        "type": "integer",
                      },
                      "flowName": Object {
                        "title": "Flow Name",
                        "type": "string",
                      },
                      "layers": Object {
                        "items": Object {
                          "type": "string",
                        },
                        "title": "Layers",
                        "type": "array",
                      },
                      "length": Object {
                        "minimum": -1,
                        "title": "Length",
                        "type": "integer",
                      },
                      "name": Object {
                        "title": "Name",
                        "type": "string",
                      },
                      "note": Object {
                        "$ref": "#/definitions/PersistableNote",
                        "title": "Note",
                      },
                      "offset": Object {
                        "title": "Offset",
                        "type": "integer",
                      },
                      "project": Object {
                        "format": "uri",
                        "title": "Project",
                        "type": "string",
                      },
                      "tick": Object {
                        "$ref": "#/definitions/PersistableTick",
                        "title": "Tick",
                      },
                    },
                  }
                }
                fields={
                  Object {
                    "bits": Object {
                      "defaultValue": 1,
                    },
                    "channel": Object {
                      "defaultValue": 1,
                    },
                    "flowName": Object {
                      "cellWidth": 2,
                      "defaultValue": "pattern",
                      "readOnly": true,
                    },
                    "layers": Object {
                      "defaultValue": "",
                      "hidden": true,
                    },
                    "length": Object {
                      "defaultValue": -1,
                    },
                    "name": Object {
                      "maxLength": 8,
                      "size": 8,
                    },
                    "note": Object {
                      "cellWidth": 2,
                      "fields": Object {
                        "denominator": Object {
                          "defaultValue": 1,
                          "hidden": true,
                        },
                        "number": Object {
                          "cellWidth": 4,
                          "defaultValue": 60,
                          "maxLength": 3,
                        },
                        "numerator": Object {
                          "cellWidth": 4,
                          "defaultValue": 1,
                        },
                        "velocity": Object {
                          "cellWidth": 4,
                          "defaultValue": 100,
                          "maxLength": 3,
                        },
                      },
                    },
                    "offset": Object {
                      "defaultValue": 0,
                    },
                    "tick": Object {
                      "cellWidth": 2,
                      "fields": Object {
                        "denominator": Object {
                          "cellWidth": 6,
                          "defaultValue": 1,
                          "label": "/",
                        },
                        "numerator": Object {
                          "cellWidth": 6,
                          "defaultValue": 1,
                        },
                        "timeUnit": Object {
                          "defaultValue": "BEAT",
                          "hidden": true,
                        },
                      },
                    },
                  }
                }
                flux={
                  MockFlux {
                    "client": [Function],
                    "loadFromServer": [Function],
                    "loadSchema": [Function],
                    "onCreate": [Function],
                    "onDelete": [Function],
                    "onPatch": [Function],
                    "onUpdate": [Function],
                  }
                }
                onApply={[Function]}
                project={
                  Object {
                    "_links": Object {
                      "channels": Object {
                        "href": "http://localhost:8080/api/project/1/channels",
                      },
                      "layers": Object {
                        "href": "http://localhost:8080/api/project/1/layers",
                      },
                      "project": Object {
                        "href": "http://localhost:8080/api/project/1",
                      },
                      "self": Object {
                        "href": "http://localhost:8080/api/project/1",
                      },
                      "sequences": Object {
                        "href": "http://localhost:8080/api/project/1/sequences",
                      },
                    },
                    "name": "defaultProject",
                  }
                }
                schema={
                  Schema {
                    "revision": undefined,
                  }
                }
              >
                <div
                  className="entityCreate row"
                >
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      maxLength={8}
                      onKeyPress={[Function]}
                      placeholder="name"
                      size={8}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={1}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="bits"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="component col-2"
                  >
                    <div
                      className="row"
                    >
                      <div
                        className="col-4"
                      >
                        <input
                          className="inline"
                          defaultValue={60}
                          maxLength={3}
                          onKeyPress={[Function]}
                          placeholder="note.number"
                          size={3}
                          type="text"
                        />
                      </div>
                      <div
                        className="col-4"
                      >
                        <input
                          className="inline"
                          defaultValue={100}
                          maxLength={3}
                          onKeyPress={[Function]}
                          placeholder="note.velocity"
                          size={3}
                          type="text"
                        />
                      </div>
                      <div
                        className="col-4"
                      >
                        <input
                          className="inline"
                          defaultValue={1}
                          maxLength={1024}
                          onKeyPress={[Function]}
                          placeholder="note.numerator"
                          size={3}
                          type="text"
                        />
                      </div>
                      <input
                        name="note.denominator"
                        type="hidden"
                        value={1}
                      />
                    </div>
                  </div>
                  <div
                    className="component col-2"
                  >
                    <div
                      className="row"
                    >
                      <div
                        className="col-6"
                      >
                        <input
                          className="inline"
                          defaultValue={1}
                          maxLength={1024}
                          onKeyPress={[Function]}
                          placeholder="tick.numerator"
                          size={3}
                          type="text"
                        />
                      </div>
                      <div
                        className="col-6"
                      >
                        <span>
                          /
                        </span>
                        <input
                          className="inline"
                          defaultValue={1}
                          maxLength={1024}
                          onKeyPress={[Function]}
                          placeholder="tick.denominator"
                          size={3}
                          type="text"
                        />
                      </div>
                      <input
                        name="tick.timeUnit"
                        type="hidden"
                        value="BEAT"
                      />
                    </div>
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={0}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="offset"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={-1}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="length"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-1"
                  >
                    <input
                      className="inline"
                      defaultValue={1}
                      maxLength={1024}
                      onKeyPress={[Function]}
                      placeholder="channel"
                      size={3}
                      type="text"
                    />
                  </div>
                  <div
                    className="col-2"
                  >
                    <span>
                      pattern
                    </span>
                    <input
                      name="flowName"
                      type="hidden"
                      value="pattern"
                    />
                  </div>
                  <input
                    name="layers"
                    type="hidden"
                    value=""
                  />
                  <div
                    className="col-1"
                  >
                    <input
                      name="project"
                      type="hidden"
                      value="http://localhost:8080/api/project/1"
                    />
                    <input
                      name="path"
                      type="hidden"
                      value="sequence"
                    />
                    <button
                      className="btn btn-primary"
                      onClick={[Function]}
                      type="submit"
                    >
                      Create
                    </button>
                  </div>
                </div>
              </EditEntity>
            </div>
          </div>
        </SequenceList>
      </div>
    </SequencesContainer>
  </Connect(SequencesContainer)>
</Provider>
`;
